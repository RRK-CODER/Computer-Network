CRC
package javaTpoint.MicrosoftJava;  
import java.util.*;  
// create CRCExample class to demonstrate the working of Cyclic Redundancy Check  
class CRCExample {  
    // main() method start  
    public static void main(String args[]) {  
        // create scanner class object to take input from user  
        Scanner scan = new Scanner(System.in);  
        // declare n for the size of the data  
        int size;  
        // take the size of the data from the user  
        System.out.println("Enter the size of the data array: ");  
        size = scan.nextInt();  
        // declaration of the data array  
        int data[] = new int[size];  
        // take bits of the data from the user  
        System.out.println("Enter data bits in the array one by one: ");  
        for(int i = 0 ; i < size ; i++) {  
            System.out.println("Enter bit " + (size-i) + ":");  
            data[i] = scan.nextInt();  
        }  
        // take the size of the divisor from the user  
        System.out.println("Enter the size of the divisor array:");  
        size = scan.nextInt();  
        // declaration of the divisor array  
        int divisor[] = new int[size];  
        System.out.println("Enter divisor bits in the array one by one: ");  
        for(int i = 0 ; i < size ; i++) {  
            System.out.println("Enter bit " + (size-i) + ":");  
            divisor[i] = scan.nextInt();  
        }  
    // Divide the input data by the input divisor and store the result in the rem array  
        int rem[] = divideDataWithDivisor(data, divisor);  
        // iterate rem using for loop to print each bit  
        for(int i = 0; i < rem.length-1; i++) {  
            System.out.print(rem[i]);  
        }  
        System.out.println("\nGenerated CRC code is: ");  
          
        for(int i = 0; i < data.length; i++) {  
            System.out.print(data[i]);  
        }  
        for(int i = 0; i < rem.length-1; i++) {  
            System.out.print(rem[i]);  
        }  
        System.out.println();  
        // we create a new array that contains the original data with its CRC code  
        // the size of the sentData array with be equal to the sum of the data and the rem arrays length  
        int sentData[] = new int[data.length + rem.length - 1];  
        System.out.println("Enter bits in the array which you want to send: ");  
        for(int i = 0; i < sentData.length; i++) {  
            System.out.println("Enter bit " +(sentData.length - 1)+ ":");  
            sentData[i] = scan.nextInt();  
        }  
        receiveData(sentData, divisor);  
    }  
    // create divideDataWithDivisor() method to get CRC  
    static int[] divideDataWithDivisor(int oldData[], int divisor[]) {  
        // declare rem[] array  
        int rem[] = new int[divisor.length];  
        int i;  
        int data[] = new int[oldData.length + divisor.length];  
    // use system's arraycopy() method for copying data into rem and data arrays  
        System.arraycopy(oldData, 0, data, 0, oldData.length);  
        System.arraycopy(data, 0, rem, 0, divisor.length);  
        // iterate the oldData and exor the bits of the remainder and the divisor  
        for(i = 0; i < oldData.length; i++) {  
            System.out.println((i+1) + ".) First data bit is : "+ rem[0]);  
            System.out.print("Remainder : ");  
            if(rem[0] == 1) {  
                // We have to exor the remainder bits with divisor bits  
                for(int j = 1; j < divisor.length; j++) {  
                    rem[j-1] = exorOperation(rem[j], divisor[j]);  
                    System.out.print(rem[j-1]);  
                }  
            }  
            else {  
                // We have to exor the remainder bits with 0  
                for(int j = 1; j < divisor.length; j++) {  
                    rem[j-1] = exorOperation(rem[j], 0);  
                    System.out.print(rem[j-1]);  
                }  
            }  
            // The last bit of the remainder will be taken from the data  
            // This is the 'carry' taken from the dividend after every step  
            // of division  
            rem[divisor.length-1] = data[i+divisor.length];  
            System.out.println(rem[divisor.length-1]);  
        }  
        return rem;  
    }  
    // create exorOperation() method to perform exor data  
    static int exorOperation(int x, int y) {  
        // This simple function returns the exor of two bits  
        if(x == y) {  
            return 0;  
        }  
        return 1;  
    }  
    // method to print received data   
    static void receiveData(int data[], int divisor[]) {  
       
        int rem[] = divideDataWithDivisor(data, divisor);  
        // Division is done  
        for(int i = 0; i < rem.length; i++) {  
            if(rem[i] != 0) {  
                // if the remainder is not equal to zero, data is currupted  
                System.out.println("Currupted data received...");  
                return;  
            }  
        }  
        System.out.println("Data received without any error.");  
    }  
}  

Hamming Code
package HammingCode;

public // Java code to implement Hamming Code
class HammingCode {

	// print elements of array
	static void print(int ar[])
	{
		for (int i = 1; i < ar.length; i++) {
			System.out.print(ar[i]);
		}
		System.out.println();
	}

	// calculating value of redundant bits
	static int[] calculation(int[] ar, int r)
	{
		for (int i = 0; i < r; i++) {
			int x = (int)Math.pow(2, i);
			for (int j = 1; j < ar.length; j++) {
				if (((j >> i) & 1) == 1) {
					if (x != j)
						ar[x] = ar[x] ^ ar[j];
				}
			}
			System.out.println("r" + x + " = "
							+ ar[x]);
		}

		return ar;
	}

	static int[] generateCode(String str, int M, int r)
	{
		int[] ar = new int[r + M + 1];
		int j = 0;
		for (int i = 1; i < ar.length; i++) {
			if ((Math.ceil(Math.log(i) / Math.log(2))
				- Math.floor(Math.log(i) / Math.log(2)))
				== 0) {

				// if i == 2^n for n in (0, 1, 2, .....)
				// then ar[i]=0
				// codeword[i] = 0 ----
				// redundant bits are initialized
				// with value 0
				ar[i] = 0;
			}
			else {

				// codeword[i] = dataword[j]
				ar[i] = (int)(str.charAt(j) - '0');
				j++;
			}
		}
		return ar;
	}

	// Driver code
	public static void main(String[] args)
	{

		// input message
		String str = "0101";
		int M = str.length();
		int r = 1;

		while (Math.pow(2, r) < (M + r + 1)) {
			// r is number of redundant bits
			r++;
		}
		int[] ar = generateCode(str, M, r);

		System.out.println("Generated hamming code ");
		ar = calculation(ar, r);
		print(ar);
	}
}

Parity Checker

import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.BigInteger;

public class ParityChecker {

	/* Function to get parity of number n.
	It returns 1 if n has odd parity, and
	returns 0 if n has even parity */
	static boolean getParity(int n)
	{
		boolean parity = false;
		while(n != 0)
		{
			parity = !parity;
			n = n & (n-1);
		}
		return parity;
		
	}
	
	/* Driver program to test getParity() */
	public static void main (String[] args)
	{
		int n = 7;
		System.out.println("Parity of no " + n + " = " +
						(getParity(n)? "odd": "even"));
	}
}

GoBackN 

//server
//Server:ARQ_Server.java
import java.net.*;
import java.io.*;
import java.util.*;
public class server
{
public static void main(String args[]) throws Exception
{
ServerSocket server=new ServerSocket(6262);
System.out.println("Server established.");
Socket client=server.accept();
ObjectOutputStream oos=new ObjectOutputStream(client.getOutputStream());
ObjectInputStream ois=new ObjectInputStream(client.getInputStream());
System.out.println("Client is now connected.");
int x=(Integer)ois.readObject();
int k=(Integer)ois.readObject();
int j=0;
int i=(Integer)ois.readObject();
boolean flag=true;
Random r=new Random(6);
int mod=r.nextInt(6);
while(mod==1||mod==0)
mod=r.nextInt(6);
while(true)
{
int c=k;
for(int h=0;h<=x;h++)
{
System.out.print("|"+c+"|");
c=(c+1)%x;
}
System.out.println();
System.out.println();
if(k==j)
{
System.out.println("Frame "+k+" recieved"+"\n"+"Data:"+j);
j++;
System.out.println();
}
else
System.out.println("Frames recieved not in correct order"+"\n"+"Expected frame:" + j +"\n"+ " Recieved frame no :"+ k);
System.out.println();
if(j%mod==0 && flag)
{
System.out.println("Error found. Acknowledgement not sent.");
flag=!flag;
j--;
}
else if(k==j-1)
{
oos.writeObject(k);
System.out.println("Acknowledgement sent");
}
System.out.println();
if(j%mod==0)
flag=!flag;
k=(Integer)ois.readObject();
if(k==-1)
break;
i=(Integer)ois.readObject();
}
System.out.println("Client finished sending data. Exiting");
oos.writeObject(-1);
}
}
//Client:ARQ_Client.java
import java.util.*;
import java.net.*;
import java.io.*;
public class client
{
public static void main(String args[]) throws Exception
{
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
System.out.print("Enter the value of m : ");
int m=Integer.parseInt(br.readLine());
int x=(int)((Math.pow(2,m))-1);
System.out.print("Enter no. of frames to be sent:");
int count=Integer.parseInt(br.readLine());
int data[]=new int[count];
int h=0;
for(int i=0;i<count;i++)
{
System.out.print("Enter data for frame no " +h+ " => ");
data[i]=Integer.parseInt(br.readLine());
h=(h+1)%x;
}
Socket client=new Socket("localhost",6262);
ObjectInputStream ois=new ObjectInputStream(client.getInputStream());
ObjectOutputStream oos=new ObjectOutputStream(client.getOutputStream());
System.out.println("Connected with server.");
boolean flag=false;
GoBackNListener listener=new GoBackNListener(ois,x);
listener=new GoBackNListener(ois,x);
listener.t.start();
int strt=0;
h=0;
oos.writeObject(x);
do
{
int c=h;
for(int i=h;i<count;i++)
{
System.out.println("|"+c+"|");
c=(c+1)%x;
}
System.out.println();
System.out.println();
h=strt;
for(int i=strt;i<x;i++)
{
System.out.println("Sending frame:"+h);
h=(h+1)%x;
System.out.println();
oos.writeObject(i);
oos.writeObject(data[i]);
Thread.sleep(100);
}
listener.t.join(3500);
if(listener.reply!=x-1)
{
System.out.println("No reply from server in 3.5 seconds. Resending data from frame no " + (listener.reply+1));
System.out.println();
strt=listener.reply+1;
flag=false;
}
else
{
System.out.println("All elements sent successfully. Exiting");
flag=true;
}
}while(!flag);
oos.writeObject(-1);
}
}
class GoBackNListener implements Runnable
{
Thread t;
ObjectInputStream ois;
int reply,x;
GoBackNListener(ObjectInputStream o,int i)
{
t=new Thread(this);
ois=o;
reply=-2;
x=i;
}
@Override
public void run()
{
try
{
int temp=0;
while(reply!=-1)
{
reply=(Integer)ois.readObject();
if(reply!=-1 && reply!=temp+1)
reply=temp;
if(reply!=-1)
{
temp=reply;
System.out.println("Acknowledgement of frame no " + (reply%x) + "recieved.");
System.out.println();
}
}
reply=temp;
}
catch(Exception e)
{
System.out.println("Exception => " + e);
}
}
}


Talk
//server.java
import java.io.*;
import java.net.*;
public class server
{
public static void main(String args[])throws Exception
{
 System.out.println("Waiting for clients");
 ServerSocket ss=new ServerSocket(8000);
 Socket s=ss.accept();
 BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
 PrintWriter print=new PrintWriter(s.getOutputStream(),true);
 BufferedReader br1=new BufferedReader(new InputStreamReader(s.getInputStream()));
 String msg="";
 while(!msg.equals("stop")){
 String cmsg=br1.readLine();
 System.out.println("Message from client:"+cmsg);
 System.out.println("Enter your message");
 msg=br.readLine();
 print.println(msg);
 
   }
 }
}

//client.java
import java.io.*;
import java.net.*;
public class client
{
public static void main(String args[]) throws IOException
{
 Socket s=new Socket("localhost",8000);
 BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
 PrintWriter print=new PrintWriter(s.getOutputStream(),true);
 BufferedReader br1=new BufferedReader(new InputStreamReader(s.getInputStream()));
 String msg="";
 while(!msg.equals("stop")){
 System.out.println("Enter your message");
 msg=br.readLine();
 print.println(msg);
 String smsg=br1.readLine();
 System.out.println("Message from server:"+smsg);
    }
   }  
 }

Echo

//server
import java.io.*;
import java.net.*;
class echoserver
{
public static void main(String args[]) throws IOException
{
Socket s=null;
ServerSocket ss=new ServerSocket(8000);
s=ss.accept();
System.out.println(s);
BufferedReader br=new BufferedReader(new InputStreamReader(s.getInputStream())
);
PrintWriter print=new PrintWriter(s.getOutputStream(),true);
String b1=br.readLine();
print.println(b1);
}
}
//client
import java.io.*;
import java.net.*;
class echoclient
{
public static void main(String a[])
{
try
{
Socket s=new Socket("LocalHost",8000);
DataInputStream in=new DataInputStream(System.in);
BufferedReader br1=new BufferedReader(new InputStreamReader(System.in));
BufferedReader br2=new BufferedReader(new InputStreamReader(s.getInputStream()
));
PrintWriter print=new PrintWriter(s.getOutputStream(),true);
System.out.println("\n msg to be echo:");
String str=br1.readLine();
print.println(str);
//print.flush();
System.out.println(br2.readLine());
}
catch(UnknownHostException e)
{}
catch(IOException e)
{
System.out.println("\n error:"+e);
}
}
}

Ping
//server
import java.io.*;
import java.net.*;
//import jdk.internal.org.jline.utils.InputStreamReader;
public class server {
 public static void main(String[] args) throws IOException{
 System.out.println("Waiting for clients");
 ServerSocket ss=new ServerSocket(8000);
 Socket s=ss.accept();
 BufferedReader br1=new BufferedReader(new InputStreamReader(s.getInputStream()));
 String msg=br1.readLine();
 PrintWriter print=new PrintWriter(s.getOutputStream(),true);
 print.println(msg);
 }
 
}
//client
import java.io.*;
import java.net.*;
//import jdk.internal.org.jline.utils.InputStreamReader;
public class client {
 
 public static void main(String[] args) throws IOException{
 long t1,t2;
 Socket s=new Socket("localhost",8000);
 System.out.println("enter a string");
 BufferedReader br=new BufferedReader(new InputStreamReader(System.in))
;
 String message=br.readLine();
 PrintWriter print=new PrintWriter(s.getOutputStream(),true);
 t1=System.currentTimeMillis();
 print.println(message);
 
 BufferedReader br1=new BufferedReader(new InputStreamReader(s.getInputStream()));
 String str=br1.readLine();
 t2=System.currentTimeMillis();
 System.out.println("Pinging from"+s.getInetAddress()+ "with string "+message);
  System.out.println("Reply from"+s.getInetAddress()+ "with string "+str+ "of length"+ str.length());
  System.out.println("sent"+message.length()+"received:"+str.length()+"lost:"+(message.length()-str.length()));
  System.out.println("Time Taken :"+(t2-t1));
  }
 }

RCE
//server
import java.io.*;
import java.net.*;
class server
{
public static void main(String args[]) throws IOException
{
try
{
String str;
ServerSocket server=new ServerSocket(6555);
Socket s=server.accept();
BufferedReader br=new BufferedReader(new InputStreamReader(s.getInputStream())
);
str=br.readLine();
Runtime r=Runtime.getRuntime();
Process p =r.exec(str);
}
catch(IOException e)
{
System.out.println("Error"+e);
}
}}

//client
import java.io.*;
import java.net.*;
class client
{
public static void main(String args[]) throws IOException
{
 try {
String str;
Socket client=new Socket("127.0.0.1",6555);
PrintStream ps=new PrintStream(client.getOutputStream());
BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
System.out.println("\t\t\t\tCLIENT WINDOW\n\n\t\tEnter TheCommand:");
str=br.readLine();
ps.println(str);
}
catch(IOException e)
{
System.out.println("Error"+e); }}}

TCP
//server
import java.io.*;
import java.net.*;
public class server {
 public static void main(String[] args)throws Exception{
 try{
 ServerSocket a = new ServerSocket(4333);
 Socket s1 =a.accept();
 FileInputStream f1 = new FileInputStream("D:/CSE/Semester 5/CN LAB/SOCKETPROGRAM FTP using TCP/hi.txt");
 byte b[]=new byte[3000];
 f1.read(b,0,b.length);
 OutputStream os = s1.getOutputStream();
 os.write(b,0,b.length);
 System.out.println("File sent successfully !");
 }
 catch(IOException e)
{
 System.out.println("Error"+e.getMessage());
}
}
}
//client
import java.io.*;
import java.net.*;
public class client {
 
 public static void main(String[] args) throws Exception {
 // TODO code application logic here
 try{
 byte[] b = new byte[3000];
 Socket s = new Socket("localhost",4333);
 InputStream is = s.getInputStream();
 FileOutputStream f = new FileOutputStream("D:/CSE/Semester 5/CN LAB/hi.txt");
 is.read(b,0,b.length);
 f.write(b,0,b.length);
 System.out.println("File saved successfully !");
 }
 catch(IOException e){
 System.out.println("Error "+e);
 }
 } }
UDP
//server
import java.io.*;
import java.net.*;
import java.util.*;
public class server {
 public static void main(String args[]) throws IOException {
 byte b[] = new byte[3072];
 DatagramSocket dsoc = new DatagramSocket(1000);
 System.out.println("UDP file sender");
 FileOutputStream f = new FileOutputStream("D:/CSE/Semester 5/CN LAB/SOCKETPROGRAM FTP using UDP/hi.txt");
 while (true) {
 DatagramPacket dp = new DatagramPacket(b, b.length);
 dsoc.receive(dp);
 System.out.println(new String(dp.getData(), 0, dp.getLength()));
 System.out.println("The file is sent successfully");
 }
 }
}
//client
import java.net.*;
import java.io.*;
public class client{
 public static void main(String args[]) throws Exception {
 byte b[] = new byte[3000];
 FileInputStream f = new FileInputStream("D:/CSE/Semester 5/CN LAB/SOCKETPROGRAM FTP using UDP/hi.txt");
 System.out.println("UDP file receiver");
 DatagramSocket dsoc = new DatagramSocket(2000);
 int i = 0;
 while (f.available() != 0) {
 b[i] = (byte) f.read();
 i++;
 }
 System.out.println("The file received successfully");
 f.close();
 dsoc.send(new DatagramPacket(b, i, InetAddress.getLocalHost(), 1000));
 }
}


Screen Capture
client
import javax.swing.*;
import java.net.*;
import java.awt.image.*;
import javax.imageio.*;
import java.io.*;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import java.awt.Rectangle;

public class screenclient {
    public static void main(String args[]) throws Exception {
        Socket soc;
        BufferedImage img = null;
        soc = new Socket("localhost", 4000);
        System.out.println("Client is running...");
        try {
            System.out.println("Reading image from disk...");
            Robot robot = new Robot();
            String format = "jpg";
            Rectangle screenRect = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());
            BufferedImage screenFullImage = robot.createScreenCapture(screenRect);
            ImageIO.write(screenFullImage, format, new File("screen.jpg"));
            System.out.println("Screen Capture...");
            img = ImageIO.read(new File("screen.jpg"));
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(img, "jpg", baos);
            baos.flush();
            byte[] bytes = baos.toByteArray();
            baos.close();
            System.out.println("Sending image to server...");
            OutputStream out = soc.getOutputStream();
            DataOutputStream dos = new DataOutputStream(out);
            dos.writeInt(bytes.length);
            dos.write(bytes, 0, bytes.length);
            System.out.println("Image sent to server....");
            dos.close();
            out.close();
        } catch (Exception e) {
            System.out.println("Exception: " + e.getMessage());
            soc.close();
        }
        soc.close();
    }
}

server
import java.net.*;
import java.io.*;
import java.awt.image.*;
import javax.imageio.*;
import javax.swing.*;

class screenserver {
    public static void main(String args[]) throws Exception {
        ServerSocket server = null;
        Socket socket;
        server = new ServerSocket(4000);
        System.out.println("Server Waiting for image");
        socket = server.accept();
        System.out.println("Client connected...");
        InputStream in = socket.getInputStream();
        DataInputStream dis = new DataInputStream(in);
        int len = dis.readInt();
        byte[] data = new byte[len];
        dis.readFully(data);
        dis.close();
        in.close();
        InputStream ian = new ByteArrayInputStream(data);
        BufferedImage bImage = ImageIO.read(ian);
        ImageIO.write(bImage, "jpg", new File("screencaptured.jpg"));
    }
}

Socket for HTTP-WebPage Upload
Server
import java.net.*;
import java.io.*;
import java.awt.image.*;
import javax.imageio.*;
import javax.swing.*;
public class UploadServer{
public static void main(String args[]) throws Exception{
ServerSocket server=null;
Socket socket;
server=new ServerSocket(4000);
System.out.println("Server Waiting for image"); 
socket=server.accept(); 
System.out.println("Client connected.");
InputStream in = socket.getInputStream();
DataInputStream dis = new DataInputStream(in);
int len = dis.readInt();
System.out.println("Image Size: " + len/1024 + "KB"); 
byte[] data = new byte[len];
dis.readFully(data);
dis.close();
 in.close();
InputStream ian = new ByteArrayInputStream(data);
BufferedImage bImage = ImageIO.read(ian);
JFrame f = new JFrame("Server");
ImageIcon icon = new ImageIcon(bImage);
JLabel l= new JLabel();
l.setIcon(icon);
f.add(l);
f.pack();
 f.setVisible(true);
}
}

Client
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.*;
import java.net.*;
import java.awt.image.*;
import javax.imageio.*;
import java.io.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
public class UploadClient {
public static void main(String args[]) throws Exception{ Socket soc;
BufferedImage img = null;
soc=new Socket("localhost", 4000);
System.out.println("Client is running. ");
try {
System.out.println("Reading image from disk. ");
img = ImageIO.read(new File("Professional:\\CSE\\DS.png"));
ByteArrayOutputStream baos = new ByteArrayOutputStream();
ImageIO.write(img, "jpg", baos); 
baos.flush();
byte[] bytes = baos.toByteArray(); 
baos.close();
System.out.println("Sending image to server. ");
OutputStream out = soc.getOutputStream();
DataOutputStream dos = new DataOutputStream(out);
dos.writeInt(bytes.length);
dos. write(bytes, 0, bytes.length);
System.out.println("Image sent to server. ");
dos.close();
out.close();
}catch (Exception e) { System.out.println("Exception: " + e.getMessage());
soc.close();
}
soc.close();
}
}

Socket for HTTP-WebPage Download

import java.io.*;
import java.net.URL;
import java.net. MalformedURLException;
public class WebPageDownload {
public static void DownloadWebPage(String webpage) {
try{
URL url = new URL(webpage);
BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
BufferedWriter writer = new BufferedWriter(new FileWriter("data.html"));
String line;
while ((line = reader.readLine()) != null) {
System.out.println(line);
writer.write(line);
 writer.newLine();
}
reader.close(); 
writer.close();
System.out.println("Successfully Downloaded");
}
catch (MalformedURLException mue){
System.out.println("Malformed URL exception raised");
}
catch (IOException ie){
System.out.println("IO exception raised");
}
}
public static void main(String[] args) throws Exception{
String url = "https://www.google.com";
DownloadWebPage(url);
}
}

ARQ Server
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
public class RepeatARQserverRepeatARQserver 
{
static ServerSocket Serversocket;
static DataInputStream dis;
static DataOutputStream dos;
public static void main(String[] args) throws SocketException 
{
try 
{
int a[] = { 30, 40, 50, 60, 70, 80, 90, 100 };
Serversocket = new ServerSocket(8011);
System.out.println("waiting for connection");
Socket client = Serversocket.accept();
dis = new DataInputStream(client.getInputStream());
dos = new DataOutputStream(client.getOutputStream());
System.out.println("The number of packets sent is:" + a.length);
int y = a.length;
dos.write(y);
dos.flush();
for (int i = 0; i < a.length; i++) 
{
dos.write(a[i]);
dos.flush();
}
int k = dis.read();
dos.write(a[k]);
dos.flush();
}
catch (IOException e)
{
System.out.println(e);
}
finally
{
try 
{
dis.close();
dos.close();
}
catch (IOException e) 
{
e.printStackTrace();
}
}
}
}

ARQ Client
import java.lang.System;
import java.net.*; 
import java.io.*;
import java.text.*;
import java.util.Random;
import java.util.*;
public class RepeatARQclient {
static Socket connection;
public static void main(String a[]) throws SocketException {
try {
int v[] = new int[10]; 
int n = 0;
Random rands = new Random();
int rand = 0; 
InetAddress addr = InetAddress.getByName("Localhost");
System.out.println(addr);
connection = new Socket(addr, 8011);
DataOutputStream out = new DataOutputStream(
connection.getOutputStream());
DataInputStream in = new DataInputStream(
connection.getInputStream());
int p = in.read();
System.out.println("No of frame is:" + p);
for (int i = 0; i < p; i++) {
v[i] = in.read();
System.out.println(v[i]);
//g[i] = v[i];
}
rand = rands.nextInt(p);//FRAME NO. IS RANDOMLY GENERATED
v[rand] = -1;
for (int i = 0; i < p; i++)
{
System.out.println("Received frame is: " + v[i]);
}
for (int i = 0; i < p; i++)
if (v[i] == -1) {
System.out.println("Request to retransmit from packet no "
+ (i+1) + " again!!");
n = i;
out.write(n);
out.flush();
}
System.out.println();
v[n] = in.read();
System.out.println("Received frame is: " + v[n]);
System.out.println("quiting");
} catch (Exception e) {
System.out.println(e);
}
}
}